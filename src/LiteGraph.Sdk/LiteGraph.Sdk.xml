<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiteGraph.Sdk</name>
    </assembly>
    <members>
        <member name="T:LiteGraph.Sdk.Credential">
            <summary>
            Credentials.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.UserGUID">
            <summary>
            User GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.BearerToken">
            <summary>
            Access key.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Credential.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Credential.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Edge">
            <summary>
            Edge in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.From">
            <summary>
            Globally-unique identifier of the from node.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.FromNode">
            <summary>
            From node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.To">
            <summary>
            Globally-unique identifier of the to node.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.ToNode">
            <summary>
            To node.  This property is only populated when retrieving routes.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Cost">
            <summary>
            Cost.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Edge.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Edge.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.EdgeBetween">
            <summary>
            Existence check for multiple identifiers request.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.EdgeBetween.From">
            <summary>
            From GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.EdgeBetween.To">
            <summary>
            To GUID.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.EdgeBetween.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.EnumerationOrderEnum">
            <summary>
            Enumeration order.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CreatedAscending">
            <summary>
            Created ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CreatedDescending">
            <summary>
            Created descending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.NameAscending">
            <summary>
            Name ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.NameDescending">
            <summary>
            Name descending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.GuidAscending">
            <summary>
            GUID ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.GuidDescending">
            <summary>
            GUID descending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CostAscending">
            <summary>
            Cost ascending.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.EnumerationOrderEnum.CostDescending">
            <summary>
            Cost descending.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.ExistenceRequest">
            <summary>
            Existence check for multiple identifiers request.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceRequest.Nodes">
            <summary>
            List of node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceRequest.Edges">
            <summary>
            List of edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceRequest.EdgesBetween">
            <summary>
            List of edges between two nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.ExistenceRequest.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.ExistenceRequest.ContainsExistenceRequest">
            <summary>
            Verify that the object contains at least one existence request.
            </summary>
            <returns>True if present.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.ExistenceResult">
            <summary>
            Existence check for multiple identifiers result.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceResult.ExistingNodes">
            <summary>
            List of existing node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceResult.MissingNodes">
            <summary>
            List of missing node GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceResult.ExistingEdges">
            <summary>
            List of existing edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceResult.MissingEdges">
            <summary>
            List of missing edge GUIDs.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceResult.ExistingEdgesBetween">
            <summary>
            List of existing edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.ExistenceResult.MissingEdgesBetween">
            <summary>
            List of missing edges between two nodes.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.ExistenceResult.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Graph.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Graph.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.BatchMethods">
            <summary>
            Batch methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.BatchMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Batch methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.BatchMethods.Existence(System.Guid,System.Guid,LiteGraph.Sdk.ExistenceRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.CredentialMethods">
            <summary>
            Credential methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.CredentialMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Credential methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.CredentialMethods.Create(LiteGraph.Sdk.Credential,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.CredentialMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.CredentialMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.CredentialMethods.Update(LiteGraph.Sdk.Credential,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.CredentialMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.CredentialMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.EdgeMethods">
            <summary>
            Edge methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Edge methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.Create(LiteGraph.Sdk.Edge,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.Edge},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.ReadMany(System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.ReadNodeEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.ReadEdgesFromNode(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.ReadEdgesToNode(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.ReadEdgesBetweenNodes(System.Guid,System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.Update(LiteGraph.Sdk.Edge,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.EdgeMethods.Search(LiteGraph.Sdk.SearchRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.GraphMethods">
            <summary>
            Graph methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Graph methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.Create(LiteGraph.Sdk.Graph,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.Update(LiteGraph.Sdk.Graph,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.DeleteByGuid(System.Guid,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.GraphMethods.Search(LiteGraph.Sdk.SearchRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.LabelMethods">
            <summary>
            Label methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Label methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.Create(LiteGraph.Sdk.LabelMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.LabelMetadata},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.Update(LiteGraph.Sdk.LabelMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.LabelMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.NodeMethods">
            <summary>
            Node methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Node methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.Create(LiteGraph.Sdk.Node,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.Node},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.ReadMany(System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.Update(LiteGraph.Sdk.Node,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.DeleteAllInGraph(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.ReadParents(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.ReadChildren(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.ReadNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.ReadRoutes(LiteGraph.Sdk.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.NodeMethods.Search(LiteGraph.Sdk.SearchRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.TagMethods">
            <summary>
            Tag methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Tag methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.Create(LiteGraph.Sdk.TagMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.TagMetadata},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.Update(LiteGraph.Sdk.TagMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TagMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.TenantMethods">
            <summary>
            Tenant methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TenantMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Tenant methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TenantMethods.Create(LiteGraph.Sdk.TenantMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TenantMethods.ReadMany(LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TenantMethods.ReadByGuid(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TenantMethods.Update(LiteGraph.Sdk.TenantMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TenantMethods.DeleteByGuid(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.TenantMethods.ExistsByGuid(System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.UserMethods">
            <summary>
            User methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.UserMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            User methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.UserMethods.Create(LiteGraph.Sdk.UserMaster,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.UserMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.UserMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.UserMethods.Update(LiteGraph.Sdk.UserMaster,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.UserMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.UserMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Implementations.VectorMethods">
            <summary>
            Vector methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.#ctor(LiteGraph.Sdk.LiteGraphSdk)">
            <summary>
            Vector methods.
            </summary>
            <param name="sdk">LiteGraph SDK.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.Create(LiteGraph.Sdk.VectorMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.VectorMetadata},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.Update(LiteGraph.Sdk.VectorMetadata,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:LiteGraph.Sdk.Implementations.VectorMethods.SearchVectors(System.Guid,System.Nullable{System.Guid},LiteGraph.Sdk.VectorSearchRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.IBatchMethods">
            <summary>
            Interface for batch methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IBatchMethods.Existence(System.Guid,System.Guid,LiteGraph.Sdk.ExistenceRequest,System.Threading.CancellationToken)">
            <summary>
            Batch existence request.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="req">Existence request.</param>
            <param name="token">Cancellation token.</param>
            <returns>Existence result.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.ICredentialMethods">
            <summary>
            Interface for credential methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ICredentialMethods.Create(LiteGraph.Sdk.Credential,System.Threading.CancellationToken)">
            <summary>
            Create a credential.
            </summary>
            <param name="credential">Credential.</param>
            <param name="token">Cancellation token.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ICredentialMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read credentials.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Credentials.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ICredentialMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a credential by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ICredentialMethods.Update(LiteGraph.Sdk.Credential,System.Threading.CancellationToken)">
            <summary>
            Update a credential.
            </summary>
            <param name="cred">Credential.</param>
            <param name="token">Cancellation token.</param>
            <returns>Credential.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ICredentialMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a credential.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ICredentialMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if a credential exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.IEdgeMethods">
            <summary>
            Interface for edge methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.Create(LiteGraph.Sdk.Edge,System.Threading.CancellationToken)">
            <summary>
            Create an edge between two nodes.
            </summary>
            <param name="edge">Edge.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.Edge},System.Threading.CancellationToken)">
            <summary>
            Create multiple edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edges">Edges.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.ReadMany(System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.ReadNodeEdges(System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Specialized.NameValueCollection,ExpressionTree.Expr,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get edges connected to or initiated from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="labels">Labels.</param>
            <param name="tags">Tags upon which to filter edges.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.ReadEdgesFromNode(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get edges from a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.ReadEdgesToNode(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get edges to a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.ReadEdgesBetweenNodes(System.Guid,System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get edges between two neighboring nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edges.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.Update(LiteGraph.Sdk.Edge,System.Threading.CancellationToken)">
            <summary>
            Update edge.
            </summary>
            <param name="edge">Edge.</param>
            <param name="token">Cancellation token.</param>
            <returns>Edge.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete edge.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.DeleteNodeEdges(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete all edges associated with a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Delete multiple edges from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuids">Edge GUIDs.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if an edge exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IEdgeMethods.Search(LiteGraph.Sdk.SearchRequest,System.Threading.CancellationToken)">
            <summary>
            Search edges.
            </summary>
            <param name="req">Search request.</param>
            <param name="token">Cancellation token.</param>
            <returns>Search result.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.IGraphMethods">
            <summary>
            Interface for graph methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IGraphMethods.Create(LiteGraph.Sdk.Graph,System.Threading.CancellationToken)">
            <summary>
            Create a graph.
            </summary>
            <param name="graph">Graph.</param>
            <param name="token">Cancellation token.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IGraphMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read graphs.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Graphs.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IGraphMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a graph by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IGraphMethods.Update(LiteGraph.Sdk.Graph,System.Threading.CancellationToken)">
            <summary>
            Update a graph.
            </summary>
            <param name="graph">Graph.</param>
            <param name="token">Cancellation token.</param>
            <returns>Graph.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IGraphMethods.DeleteByGuid(System.Guid,System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Delete a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="force">True to forcefully delete associated data.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IGraphMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if a graph exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IGraphMethods.Search(LiteGraph.Sdk.SearchRequest,System.Threading.CancellationToken)">
            <summary>
            Search graphs.
            </summary>
            <param name="req">Search request.</param>
            <param name="token">Cancellation token.</param>
            <returns>Search result.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.ILabelMethods">
            <summary>
            Interface for label methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.Create(LiteGraph.Sdk.LabelMetadata,System.Threading.CancellationToken)">
            <summary>
            Create a label.
            </summary>
            <param name="label">Label.</param>
            <param name="token">Cancellation token.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.LabelMetadata},System.Threading.CancellationToken)">
            <summary>
            Create multiple labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="labels">Labels.</param>
            <param name="token">Cancellation token.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Labels.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a label by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.Update(LiteGraph.Sdk.LabelMetadata,System.Threading.CancellationToken)">
            <summary>
            Update a label.
            </summary>
            <param name="label">Label.</param>
            <param name="token">Cancellation token.</param>
            <returns>Label.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a label.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Delete labels.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ILabelMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if a label exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.INodeMethods">
            <summary>
            Interface for node methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.Create(LiteGraph.Sdk.Node,System.Threading.CancellationToken)">
            <summary>
            Create a node.
            </summary>
            <param name="node">Node.</param>
            <param name="token">Cancellation token.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.CreateMany(System.Guid,System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.Node},System.Threading.CancellationToken)">
            <summary>
            Create multiple nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodes">Nodes.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.ReadMany(System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read nodes.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.ReadByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.Update(LiteGraph.Sdk.Node,System.Threading.CancellationToken)">
            <summary>
            Update node.
            </summary>
            <param name="node">Node.</param>
            <param name="token">Cancellation token.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.DeleteByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a node and all associated edges.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.DeleteAllInGraph(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete all nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.DeleteMany(System.Guid,System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Delete multiple nodes from a graph.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuids">Node GUIDs.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.ExistsByGuid(System.Guid,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check existence of a node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.ReadParents(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get nodes that have edges connecting to the specified node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.ReadChildren(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get nodes to which the specified node has connecting edges connecting.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.ReadNeighbors(System.Guid,System.Guid,System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get neighbors for a given node.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Nodes.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.ReadRoutes(LiteGraph.Sdk.SearchTypeEnum,System.Guid,System.Guid,System.Guid,System.Guid,ExpressionTree.Expr,ExpressionTree.Expr,System.Threading.CancellationToken)">
            <summary>
            Get routes between two nodes.
            </summary>
            <param name="searchType">Search type.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="fromNodeGuid">From node GUID.</param>
            <param name="toNodeGuid">To node GUID.</param>
            <param name="edgeFilter">
            Edge filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="nodeFilter">
            Node filter expression for Data JSON body.
            Expression left terms must follow the form of Sqlite JSON paths.
            For example, to retrieve the 'Name' property, use '$.Name', OperatorEnum.Equals, '[name here]'.</param>
            <param name="token">Cancellation token.</param>
            <returns>Route details.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.INodeMethods.Search(LiteGraph.Sdk.SearchRequest,System.Threading.CancellationToken)">
            <summary>
            Search nodes.
            </summary>
            <param name="req">Search request.</param>
            <param name="token">Cancellation token.</param>
            <returns>Search result.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.ITagMethods">
            <summary>
            Interface for tag methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.Create(LiteGraph.Sdk.TagMetadata,System.Threading.CancellationToken)">
            <summary>
            Create a tag.
            </summary>
            <param name="tag">Tag.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.TagMetadata},System.Threading.CancellationToken)">
            <summary>
            Create multiple tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="tags">Tags.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.ReadMany(System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tags.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a tag by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.Update(LiteGraph.Sdk.TagMetadata,System.Threading.CancellationToken)">
            <summary>
            Update a tag.
            </summary>
            <param name="tag">Tag.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tag.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a tag.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Delete tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITagMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if a tag exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.ITenantMethods">
            <summary>
            Interface for tenant methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITenantMethods.Create(LiteGraph.Sdk.TenantMetadata,System.Threading.CancellationToken)">
            <summary>
            Create a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITenantMethods.ReadMany(LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read tenants.
            </summary>
            <param name="order">Enumeration order.</param>
            <param name="skip">The number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tenants.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITenantMethods.ReadByGuid(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a tenant by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITenantMethods.Update(LiteGraph.Sdk.TenantMetadata,System.Threading.CancellationToken)">
            <summary>
            Update a tenant.
            </summary>
            <param name="tenant">Tenant.</param>
            <param name="token">Cancellation token.</param>
            <returns>Tenant.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITenantMethods.DeleteByGuid(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Delete a tenant.
            </summary>
            <param name="guid">GUID.</param>
            <param name="force">True to force deletion of users and credentials.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.ITenantMethods.ExistsByGuid(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if a tenant exists by GUID.
            </summary>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.IUserMethods">
            <summary>
            Interface for user methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IUserMethods.Create(LiteGraph.Sdk.UserMaster,System.Threading.CancellationToken)">
            <summary>
            Create a user.
            </summary>
            <param name="user">User.</param>
            <param name="token">Cancellation token.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IUserMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read users.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Users.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IUserMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a user by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IUserMethods.Update(LiteGraph.Sdk.UserMaster,System.Threading.CancellationToken)">
            <summary>
            Update a user.
            </summary>
            <param name="user">User.</param>
            <param name="token">Cancellation token.</param>
            <returns>User.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IUserMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a user.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IUserMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if a user exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Interfaces.IVectorMethods">
            <summary>
            Interface for vector methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.Create(LiteGraph.Sdk.VectorMetadata,System.Threading.CancellationToken)">
            <summary>
            Create a vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="token">Cancellation token.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.CreateMany(System.Guid,System.Collections.Generic.List{LiteGraph.Sdk.VectorMetadata},System.Threading.CancellationToken)">
            <summary>
            Create multiple vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="vectors">Vectors.</param>
            <param name="token">Cancellation token.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.ReadMany(System.Guid,LiteGraph.Sdk.EnumerationOrderEnum,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="order">Enumeration order.</param>
            <param name="skip">Number of records to skip.</param>
            <param name="token">Cancellation token.</param>
            <returns>Vectors.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.ReadByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Read a vector by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.Update(LiteGraph.Sdk.VectorMetadata,System.Threading.CancellationToken)">
            <summary>
            Update a vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="token">Cancellation token.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.DeleteByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a vector.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.DeleteMany(System.Guid,System.Collections.Generic.List{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Delete vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guids">GUIDs.</param>
            <param name="token">Cancellation token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.ExistsByGuid(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Check if a vector exists by GUID.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="guid">GUID.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Interfaces.IVectorMethods.SearchVectors(System.Guid,System.Nullable{System.Guid},LiteGraph.Sdk.VectorSearchRequest,System.Threading.CancellationToken)">
            <summary>
            Search vectors.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="searchReq">Search request.</param>
            <param name="token">Cancellation token.</param>
            <returns>Vector search result.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.LabelMetadata">
            <summary>
            Label metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.Label">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LabelMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.LabelMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.LiteGraphSdk">
            <summary>
            LiteGraph SDK. 
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Batch">
            <summary>
            Batch methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Credential">
            <summary>
            Credential methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Edge">
            <summary>
            Edge methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Graph">
            <summary>
            Graph methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Label">
            <summary>
            Label methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Node">
            <summary>
            Node methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Tag">
            <summary>
            Tag methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Tenant">
            <summary>
            Tenant methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.User">
            <summary>
            User methods.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.LiteGraphSdk.Vector">
            <summary>
            Vector methods.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.LiteGraphSdk.#ctor(System.String,System.String)">
            <summary>
            Instantiate.
            </summary>
            <param name="endpoint">Endpoint URL.</param>
            <param name="bearerToken">Bearer token.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Node">
            <summary>
            Node in the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.GUID">
            <summary>
            Globally-unique identifier.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.GraphGUID">
            <summary>
            Globally-unique identifier for the graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.CreatedUtc">
            <summary>
            Timestamp from creation, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.Tags">
            <summary>
            Tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.Data">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Node.Vectors">
            <summary>
            Vectors.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Node.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.RouteDetail">
            <summary>
            Total cost and ordered list of edges between two nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteDetail.TotalCost">
            <summary>
            Total cost of the route.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteDetail.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.RouteDetail.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.RouteRequest">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.Graph">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.From">
            <summary>
            From node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.To">
            <summary>
            To node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.EdgeFilter">
            <summary>
            Edge filters.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteRequest.NodeFilter">
            <summary>
            Node filters.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.RouteRequest.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.RouteResponse">
            <summary>
            Route response.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteResponse.Timestamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteResponse.Routes">
            <summary>
            Routes.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.RouteResponse.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.RouteResult">
            <summary>
            Route result.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteResult.Timestamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.RouteResult.Routes">
            <summary>
            Routes.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.RouteResult.#ctor">
            <summary>
            Route request.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.SdkBase">
            <summary>
            View SDK base class.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.Logger">
            <summary>
            Method to invoke to send log messages.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.Header">
            <summary>
            Header to prepend to log messages.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.Endpoint">
            <summary>
            Endpoint URL.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.BearerToken">
            <summary>
            Bearer token.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SdkBase.TimeoutMs">
            <summary>
            Timeout in milliseconds.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.#ctor(System.String,System.String)">
            <summary>
            Instantiate.
            </summary>
            <param name="endpoint">Endpoint.</param>
            <param name="bearerToken">Bearer token.</param>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Log(LiteGraph.Sdk.SeverityEnum,System.String)">
            <summary>
            Emit a log message.
            </summary>
            <param name="sev">Severity.</param>
            <param name="msg">Message.</param>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.ValidateConnectivity(System.Threading.CancellationToken)">
            <summary>
            Validate connectivity.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Boolean indicating success.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.PutCreate``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Create an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="obj">Object.</param>
            <param name="token"></param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Head(System.String,System.Threading.CancellationToken)">
            <summary>
            Check if an object exists.
            </summary>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Get``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Read an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Get(System.String,System.Threading.CancellationToken)">
            <summary>
            Read an object.
            </summary>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.GetMany``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Read objects.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>List.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.PutUpdate``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Update an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="obj">Object.</param>
            <param name="token">Cancellation token.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Delete(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an object.
            </summary>
            <param name="url">URL.</param>
            <param name="token">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Delete``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Delete an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="url">URL.</param>
            <param name="obj">Object.</param>
            <param name="token">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.Post``2(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Submit a POST request.
            </summary>
            <typeparam name="T1">Input object type.</typeparam>
            <typeparam name="T2">Return object type.</typeparam>
            <param name="url">URL.</param>
            <param name="obj">Object.</param>
            <param name="token">Cancellation token.</param>
            <returns>Instance of T2.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.SdkBase.PostRaw(System.String,System.Byte[],System.String,System.Threading.CancellationToken)">
            <summary>
            Submit a POST request.
            </summary>
            <param name="url">URL.</param>
            <param name="bytes">Bytes.</param>
            <param name="contentType">Content-type.</param>
            <param name="token">Cancellation token.</param>
            <returns>Bytes.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.SearchRequest">
            <summary>
            Search request.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchRequest.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchRequest.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchRequest.Ordering">
            <summary>
            Ordering.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchRequest.Skip">
            <summary>
            The number of records to skip.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchRequest.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchRequest.Tags">
            <summary>
            Search tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchRequest.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.SearchRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.SearchResult">
            <summary>
            Search result.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchResult.Graphs">
            <summary>
            Graphs.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchResult.Nodes">
            <summary>
            Nodes.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.SearchResult.Edges">
            <summary>
            Edges.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.SearchResult.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.SearchTypeEnum">
            <summary>
            Search type.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SearchTypeEnum.DepthFirstSearch">
            <summary>
            Depth first search.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer">
            <summary>
            JSON serializer.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Serializer.DateTimeFormat">
            <summary>
            DateTime format.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.Serializer.IncludeNullProperties">
            <summary>
            True to include null properties when serializing, false to not include null properties when serializing.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DeserializeJson``1(System.Byte[])">
            <summary>
            Deserialize JSON to an instance.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="json">JSON bytes.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DeserializeJson``1(System.String)">
            <summary>
            Deserialize JSON to an instance.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="json">JSON string.</param>
            <returns>Instance.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.SerializeJson(System.Object,System.Boolean)">
            <summary>
            Serialize object to JSON.
            </summary>
            <param name="obj">Object.</param>
            <param name="pretty">Pretty print.</param>
            <returns>JSON.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.TrySerializeJson(System.Object,System.Boolean,System.String@)">
            <summary>
            Attempt to JSON serialize an object.  Null inputs will return true.
            </summary>
            <param name="obj">Object.</param>
            <param name="pretty">Pretty.</param>
            <param name="json">JSON string.</param>
            <returns>True if serialized.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.CopyObject``1(System.Object)">
            <summary>
            Copy an object.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="o">Object.</param>
            <returns>Instance.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.ExceptionConverter`1">
            <summary>
            Exception converter.
            </summary>
            <typeparam name="TExceptionType">Exception type.</typeparam>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExceptionConverter`1.CanConvert(System.Type)">
            <summary>
            Can convert.
            </summary>
            <param name="typeToConvert">Type to convert.</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExceptionConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>TExceptionType.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExceptionConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.NameValueCollectionConverter">
            <summary>
            Name value collection converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.NameValueCollectionConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.NameValueCollectionConverter.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Specialized.NameValueCollection,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.DateTimeConverter">
            <summary>
            DateTime converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DateTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.DateTimeConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="F:LiteGraph.Sdk.Serializer.DateTimeConverter._AcceptedFormats">
            <summary>
            Reserved for future use.
            Not used because Read does a TryParse which will evaluate several formats.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.IntPtrConverter">
            <summary>
            IntPtr converter.  IntPtr cannot be deserialized.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IntPtrConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IntPtrConverter.Write(System.Text.Json.Utf8JsonWriter,System.IntPtr,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.IPAddressConverter">
            <summary>
            IP address converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IPAddressConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>NameValueCollection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.IPAddressConverter.Write(System.Text.Json.Utf8JsonWriter,System.Net.IPAddress,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.Serializer.ExpressionConverter">
            <summary>
            Expression converter.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExpressionConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read.
            </summary>
            <param name="reader">Reader.</param>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Options.</param>
            <returns>Expr.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.Serializer.ExpressionConverter.Write(System.Text.Json.Utf8JsonWriter,ExpressionTree.Expr,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write.
            </summary>
            <param name="writer">Writer.</param>
            <param name="value">Value.</param>
            <param name="options">Options.</param>
        </member>
        <member name="T:LiteGraph.Sdk.SeverityEnum">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Debug">
            <summary>
            Debug messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Warn">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Error">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Alert">
            <summary>
            Alert messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Critical">
            <summary>
            Critical messages.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.SeverityEnum.Emergency">
            <summary>
            Emergency messages.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.TagMetadata">
            <summary>
            Tag metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TagMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.TagMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.TagMetadata.ToNameValueCollection(System.Collections.Generic.List{LiteGraph.Sdk.TagMetadata})">
            <summary>
            Convert a list of tag metadata to a name value collection.
            </summary>
            <param name="tags">Tags.</param>
            <returns>Name value collection.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.TagMetadata.FromNameValueCollection(System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Collections.Specialized.NameValueCollection)">
            <summary>
            Convert a dictionary to a list of tags.
            </summary>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <param name="nvc">Name value collection.</param>
            <returns>List of tags.</returns>
        </member>
        <member name="M:LiteGraph.Sdk.TagMetadata.FromTags(System.Collections.Generic.List{LiteGraph.Sdk.TagMetadata},System.Guid,System.Guid,System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Retrieve tags from a given name value collection.
            </summary>
            <param name="tags">Tags.</param>
            <param name="tenantGuid">Tenant GUID.</param>
            <param name="graphGuid">Graph GUID.</param>
            <param name="nodeGuid">Node GUID.</param>
            <param name="edgeGuid">Edge GUID.</param>
            <returns>Name value collection.</returns>
        </member>
        <member name="T:LiteGraph.Sdk.TenantMetadata">
            <summary>
            Tenant metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TenantMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TenantMetadata.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TenantMetadata.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TenantMetadata.CreatedUtc">
            <summary>
            Created timestamp, in UTC timestamp.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.TenantMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.TenantMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.UserMaster">
            <summary>
            User.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.Email">
            <summary>
            Email.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.CreatedUtc">
            <summary>
            Creation time, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.UserMaster.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.UserMaster.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.VectorMetadata">
            <summary>
            Vector metadata.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.GUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.NodeGUID">
            <summary>
            Node GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.EdgeGUID">
            <summary>
            Edge GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.Model">
            <summary>
            Model.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.Dimensionality">
            <summary>
            Dimensionality.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.Vectors">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.CreatedUtc">
            <summary>
            Creation timestamp, in UTC.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorMetadata.LastUpdateUtc">
            <summary>
            Timestamp from last update, in UTC.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.VectorMetadata.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.VectorSearchDomainEnum">
            <summary>
            Vector search domain.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchDomainEnum.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchDomainEnum.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchDomainEnum.Edge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.VectorSearchRequest">
            <summary>
            Vector search request.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.TenantGUID">
            <summary>
            Tenant GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.GraphGUID">
            <summary>
            Graph GUID.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.Domain">
            <summary>
            Vector search domain.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.SearchType">
            <summary>
            Vector search type.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.Labels">
            <summary>
            Search labels.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.Tags">
            <summary>
            Search tags.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.Expr">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchRequest.Embeddings">
            <summary>
            Embeddings.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.VectorSearchRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.VectorSearchResult">
            <summary>
            Vector search result.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchResult.Score">
            <summary>
            Score.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchResult.Distance">
            <summary>
            Distance.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchResult.InnerProduct">
            <summary>
            Inner product.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchResult.Graph">
            <summary>
            Graph.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchResult.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:LiteGraph.Sdk.VectorSearchResult.Edge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="M:LiteGraph.Sdk.VectorSearchResult.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:LiteGraph.Sdk.VectorSearchTypeEnum">
            <summary>
            Vector search type.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchTypeEnum.CosineDistance">
            <summary>
            Cosine distance, the inverse of cosine similarity.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchTypeEnum.CosineSimilarity">
            <summary>
            Cosine similarity, the inverse of cosine distance.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchTypeEnum.EuclidianDistance">
            <summary>
            Euclidian distance, also known as L2 distance, the inverse of Euclidian similarity or L2 similarity.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchTypeEnum.EuclidianSimilarity">
            <summary>
            Euclidian simmilarity, also known as L2 similarity, the inverse of Euclidian distance or L2 distance.
            </summary>
        </member>
        <member name="F:LiteGraph.Sdk.VectorSearchTypeEnum.DotProduct">
            <summary>
            Dot product similarity.  Equivalent to cosine similarity when vectors are normalized, that is, magnitudes are all 1.
            </summary>
        </member>
    </members>
</doc>
